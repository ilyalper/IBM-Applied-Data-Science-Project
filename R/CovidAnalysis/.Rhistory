cd
ls
getwd()
setwd(getwd())
library(readr)
library(gapminder)
library(ggplot2)
rm(list=ls())
setwd(getwd())
CovidData <- read_csv("owid-covid-data.csv")
listofcnt = unique(CovidData$location) #returns list of countries
library(shiny); runApp('Covid_Shiny.R')
uniq_dates = unique(CovidData$date); #returns list of dates
library(readr)
library(gapminder)
library(ggplot2)
rm(list=ls())
setwd(getwd())
CovidData <- read_csv("owid-covid-data.csv")
rm(list=ls())
rm(list=ls())
rm(list=ls())
# Stat 564 Project 3 Group R-evolution
# Dilay Özkan & Alper Şener
#Important Notices: Please update the working directory in 14th row.
#Please run this script before running Covid_Shiny.R
#Since we store our data in a relatively big data frame, it gives results in 4 to 5 minutes
rm(list=ls())
library(readr)
library(gapminder)
library(ggplot2)
setwd(getwd())
CovidData <- read_csv("owid-covid-data.csv")
listofcnt = unique(CovidData$location) #returns list of countries
uniq_dates = unique(CovidData$date); #returns list of dates
#We are storing the covid data for each country from start_date to end_date
bas=0;son=0;
start_date = as.Date("2020-03-01")
end_date = as.Date("2020-06-01")
uniq_dates_sorted = sort(uniq_dates);
for (i in 1:length(uniq_dates_sorted)) {
if (uniq_dates_sorted[i]==start_date) {
bas=i;  }
if (uniq_dates_sorted[i]==end_date) {
son=i;  }
}
inv_date <- vector()  # storing investigated dates
class(inv_date)="Date"
inv_date[1]=uniq_dates_sorted[bas-1];
for (i in bas:son) {
inv_date[i-bas+2]=uniq_dates_sorted[i]
}
# Creating the first line of the data frame
cov.data = data.frame(
country = c ("Aruba"),
invest_date = inv_date[1],
totalCases = 0,
newCases = 0,
totalDeaths =0,
newDeaths =0,
totalCasesPerMillion =0,
totalDeathsPerMillion =0
)
# Get the structure of the data frame.
for (i in 1:(length(listofcnt)-1)) { #last country "international" includes irrelevant data that is why we exclude last cty
for (j in 1:length(inv_date)) {
k=0;
if (j==1&i==1) {k=1}
#     we will not use the first rows for the countries in plotting, but we created one initial empty row to assign
# values to columns that include no data for the investigated day
if (j == 1 ) { cov.newrow = data.frame(
country = listofcnt[i],
invest_date = inv_date[j],
totalCases = 0,
newCases = 0,
totalDeaths =0,
newDeaths =0,
totalCasesPerMillion =0,
totalDeathsPerMillion =0
)}
else{
#if there is no data for a day,we assume that an announcement is redundant and there is no update on COVID data,
if (length(CovidData[CovidData$location==listofcnt[i] & CovidData$date == inv_date[j],4]$total_cases) == 0){
toplamVaka = cov.data[cov.data$country==listofcnt[i] & cov.data$invest_date == inv_date[j-1],3]
} else{toplamVaka=CovidData[CovidData$location==listofcnt[i] & CovidData$date == inv_date[j],4]$total_cases }
if (length(CovidData[CovidData$location==listofcnt[i] & CovidData$date == inv_date[j],5]$new_cases) == 0){
yeniVaka = cov.data[cov.data$country==listofcnt[i] & cov.data$invest_date == inv_date[j-1],4]
} else{yeniVaka=CovidData[CovidData$location==listofcnt[i] & CovidData$date == inv_date[j],5]$new_cases }
if (length(CovidData[CovidData$location==listofcnt[i] & CovidData$date == inv_date[j],6]$total_deaths) == 0){
toplamOlum = cov.data[cov.data$country==listofcnt[i] & cov.data$invest_date == inv_date[j-1],5]
} else{toplamOlum=CovidData[CovidData$location==listofcnt[i] & CovidData$date == inv_date[j],6]$total_deaths }
if (length(CovidData[CovidData$location==listofcnt[i] & CovidData$date == inv_date[j],7]$new_deaths) == 0){
yeniOlum = cov.data[cov.data$country==listofcnt[i] & cov.data$invest_date == inv_date[j-1],6]
} else{yeniOlum= CovidData[CovidData$location==listofcnt[i] & CovidData$date == inv_date[j],7]$new_deaths}
if (length(CovidData[CovidData$location==listofcnt[i] & CovidData$date == inv_date[j],8]$total_cases_per_million) == 0){
milyondaVaka = cov.data[cov.data$country==listofcnt[i] & cov.data$invest_date == inv_date[j-1],7]
} else{milyondaVaka= CovidData[CovidData$location==listofcnt[i]
& CovidData$date == inv_date[j],8]$total_cases_per_million}
if (length(CovidData[CovidData$location==listofcnt[i] & CovidData$date == inv_date[j],10]$total_deaths_per_million) == 0){
milyondaOlum = cov.data[cov.data$country==listofcnt[i] & cov.data$invest_date == inv_date[j-1],8]
} else{milyondaOlum= CovidData[CovidData$location==listofcnt[i]
& CovidData$date == inv_date[j],10]$total_deaths_per_million}
#building the new row
cov.newrow = data.frame(
country = listofcnt[i],
invest_date = inv_date[j],
totalCases = toplamVaka,
newCases = yeniVaka,
totalDeaths = toplamOlum,
newDeaths = yeniOlum,
totalCasesPerMillion = milyondaVaka,
totalDeathsPerMillion = milyondaOlum
)}
k=0;
if (j==1&i==1) {k=1} #Since we create the first row of the data frame by hand, we exclude j&i=1 in the loop
if (k==0) {
cov.data = rbind(cov.data,cov.newrow)
}
}
}
runApp('Covid_Shiny.R')
# Stat 564 Project 3 Group R-evolution
# Dilay Özkan & Alper Şener
#Important Notices: Please update the working directory in 14th row.
#Please run this script before running Electricity_Shiny.R
rm(list=ls())
library(readr)
library(gapminder)
library(ggplot2)
setwd(getwd())
ElektrikTalep <- read_csv("ElektrikTalep.csv")
# Initializations
ilkyil=2016;
sonyil=2020;
yil=sonyil-ilkyil+1
months=c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec");
gunler=c("Mon","Tue","Wed","Thu","Fri","Sat","Sun");
zeros = rep(0, yil*12*7)
ortalama= array(zeros, c(yil, 12, 7));
aylikort = array(zeros, c(yil,12));
dailycons= array(zeros, c(yil, 12, 31));
yiltop= array(zeros, c(yil-1));
#Start Annual Demand Analysis (demand stored in yiltop matrix)
for (i in 1:yil-1) {
yill= ElektrikTalep[ElektrikTalep$Year==i+2015,];
yiltop[i]=sum(yill$`Tuketim(MWh)`);
}
#Create a bar chart of the years 2016-2019
dat_fra = data.frame(yearr=2016:2019,demandd=yiltop/1000)
ann_dem = ggplot(data=dat_fra, aes(x=yearr, y=demandd)) +
labs(y="Annual Demand (TWh)",x="Year", title = "Electricity Demand in Turkey, 2016-2019") +
geom_bar(stat="identity",width = 0.8,color="black", fill="deepskyblue3") +
geom_text(aes(label=round(demandd,2)),family="Times",fontface="bold", position = position_stack(vjust = 0.99), color="black", size=4.5) +
coord_cartesian(ylim = c(250,300))
# End of Annual Demand Analysis
# Analysis of Days of a Week (average consumption values stored in a matrix named as ortalama )
#obtaining daily averages for each weekday
for (i in 1:yil) {
for (j in 1:12) {
for (k in 1:7) {
day1=ElektrikTalep[ElektrikTalep$WeekDay==k & ElektrikTalep$Year==i+2015 & ElektrikTalep$Month==j,]
ortalama[i,j,k]=mean(day1$`Tuketim(MWh)`)
}}}
#obtaining monthly averages which stored at aylikort matrix
for (i in 1:yil) {
for (j in 1:12) {
aylikort[i,j]= sum(ortalama[i,j,])/7
}}
# monthly demand comparison between the period of 2017-19 and 2020
aver_comparison= array(zeros, c(2,2));
tempapr=0;
tempmay=0;
for (i in 2:(yil-1)) {
tempapr = tempapr+mean(aylikort[i,4]);
tempmay = tempmay+mean(aylikort[i,5]);
}
aver_comparison[1,1]=tempapr/3; aver_comparison[1,2]=aylikort[5,4];  # 1st row is for April
aver_comparison[2,1]=tempmay/3; aver_comparison[2,2]=aylikort[5,5];  # 2nd row is for May
1-aver_comparison[,2]/aver_comparison[,1]
#Create a boxplot for the average hourly demand in daily basis
ElektrikTalep2 = ElektrikTalep[ElektrikTalep$Year>2016,]
plot1<-ggplot(data=ElektrikTalep2, aes(x=WeekDay, y=`Tuketim(MWh)`,
group=WeekDay,color=WeekDay))+ geom_boxplot();
plot2 <- plot1+ theme(text = element_text(size=16),axis.title.y = element_text(margin = margin(r = 20)),
axis.title.x = element_text(margin = margin(t = 20)));
plot3 <- plot2 + scale_x_continuous(breaks=1:7 , labels=gunler) + labs(y="average hourly demand (GWh)",
x="Days") + labs(color='Day');
plot3
# Welch t Test for the days of Wednesday and Sunday
wednesday_demand=ElektrikTalep2[ElektrikTalep2$WeekDay==3,];
sunday_demand=ElektrikTalep2[ElektrikTalep2$WeekDay==7,];
thursday_demand=ElektrikTalep2[ElektrikTalep2$WeekDay==4,];
welch_test = t.test(x=wednesday_demand$`Tuketim(MWh)`,y=sunday_demand$`Tuketim(MWh)`,alternative = "greater")
t.test(x=wednesday_demand$`Tuketim(MWh)`,y=thursday_demand$`Tuketim(MWh)`,alternative = "less")
welch_test
#p value is very small, conf int [4.956, inf], so there is a significant diff btw. wed & sund
# end of Analysis of Days of a Week
# Create a line graph the monthly average consumption
#We obtain the colorscales through following link http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf
renkler =  c("mediumpurple1","yellowgreen","navyblue",10)
renkscale = array(renkler, c(yil,3))
renkscale[1,]
plot(1:12,aylikort[2,],xlab="month",ylab="average hourly demand (GWh)",type="l",col=renkscale[1,],
ylim=c(25,40),xaxt = "n",lwd=2)
axis(1, at=1:12, labels=months)
for (i in 3:yil) {
lines(1:12,aylikort[i,],type="l",col=renkscale[i-1,],lwd=2)
}
legend("bottomright",inset=.01,legend=c(2017:sonyil),col = renkscale,lty=1,text.font=3,box.lty=0,cex=0.7,lwd=2)
#end of plot
# a simple analysis to calculate compound annual growth rates
cagrofjan = (aylikort[5,1] / aylikort[1,1])^(1/(yil-1))-1
cagroffeb = (aylikort[5,2] / aylikort[1,2])^(1/(yil-1))-1
cagrofmar = (aylikort[5,3] / aylikort[1,3])^(1/(yil-1))-1
cagrofapr = (aylikort[5,4] / aylikort[1,4])^(1/(yil-1))-1
# Stat 564 Project 3 Group R-evolution
# Dilay Özkan & Alper Şener
#Important Notices: Please update the working directory in 14th row.
#Please run this script before running Electricity_Shiny.R
rm(list=ls())
library(readr)
library(gapminder)
library(ggplot2)
setwd(getwd())
ElektrikTalep <- read_csv("ElektrikTalep.csv")
# Initializations
ilkyil=2016;
sonyil=2020;
yil=sonyil-ilkyil+1
hs=c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec");
gunler=c("Mon","Tue","Wed","Thu","Fri","Sat","Sun");
zeros = rep(0, yil*12*7)
ortalama= array(zeros, c(yil, 12, 7));
aylikort = array(zeros, c(yil,12));
dailycons= array(zeros, c(yil, 12, 31));
yiltop= array(zeros, c(yil-1));
#Start Annual Demand Analysis (demand stored in yiltop matrix)
for (i in 1:yil-1) {
yill= ElektrikTalep[ElektrikTalep$Year==i+2015,];
yiltop[i]=sum(yill$`Tuketim(MWh)`);
}
# Stat 564 Project 3 Group R-evolution
# Dilay Özkan & Alper Şener
#Important Notices: Please update the working directory in 14th row.
#Please run this script before running Electricity_Shiny.R
rm(list=ls())
library(readr)
library(gapminder)
library(ggplot2)
setwd(getwd())
ElektrikTalep <- read_csv("ElektrikTalep.csv")
getwd())
getwd()
getwd()
(getwd()
sda
getwd()
source("~/Documents/GitHub/MyPublicRepository/R/ElectricitySectorAnalysis/Electricity_Data.R")
# Stat 564 Project 3 Group R-evolution
# Dilay Özkan & Alper Şener
#Important Notices: Please control the working directory in 14th row.
#Please run this script before running Electricity_Shiny.R
rm(list=ls())
library(readr)
library(gapminder)
library(ggplot2)
setwd(getwd())
ElektrikTalep <- read_csv("ElektrikTalep.csv")
# Initializations
ilkyil=2016;
sonyil=2020;
yil=sonyil-ilkyil+1
months=c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec");
gunler=c("Mon","Tue","Wed","Thu","Fri","Sat","Sun");
zeros = rep(0, yil*12*7)
ortalama= array(zeros, c(yil, 12, 7));
aylikort = array(zeros, c(yil,12));
dailycons= array(zeros, c(yil, 12, 31));
yiltop= array(zeros, c(yil-1));
#Start Annual Demand Analysis (demand stored in yiltop matrix)
for (i in 1:yil-1) {
yill= ElektrikTalep[ElektrikTalep$Year==i+2015,];
yiltop[i]=sum(yill$`Tuketim(MWh)`);
}
#Create a bar chart of the years 2016-2019
dat_fra = data.frame(yearr=2016:2019,demandd=yiltop/1000)
ann_dem = ggplot(data=dat_fra, aes(x=yearr, y=demandd)) +
labs(y="Annual Demand (TWh)",x="Year", title = "Electricity Demand in Turkey, 2016-2019") +
geom_bar(stat="identity",width = 0.8,color="black", fill="deepskyblue3") +
geom_text(aes(label=round(demandd,2)),family="Times",fontface="bold", position = position_stack(vjust = 0.99), color="black", size=4.5) +
coord_cartesian(ylim = c(250,300))
# End of Annual Demand Analysis
# Analysis of Days of a Week (average consumption values stored in a matrix named as ortalama )
#obtaining daily averages for each weekday
for (i in 1:yil) {
for (j in 1:12) {
for (k in 1:7) {
day1=ElektrikTalep[ElektrikTalep$WeekDay==k & ElektrikTalep$Year==i+2015 & ElektrikTalep$Month==j,]
ortalama[i,j,k]=mean(day1$`Tuketim(MWh)`)
}}}
#obtaining monthly averages which stored at aylikort matrix
for (i in 1:yil) {
for (j in 1:12) {
aylikort[i,j]= sum(ortalama[i,j,])/7
}}
# monthly demand comparison between the period of 2017-19 and 2020
aver_comparison= array(zeros, c(2,2));
tempapr=0;
tempmay=0;
for (i in 2:(yil-1)) {
tempapr = tempapr+mean(aylikort[i,4]);
tempmay = tempmay+mean(aylikort[i,5]);
}
aver_comparison[1,1]=tempapr/3; aver_comparison[1,2]=aylikort[5,4];  # 1st row is for April
aver_comparison[2,1]=tempmay/3; aver_comparison[2,2]=aylikort[5,5];  # 2nd row is for May
1-aver_comparison[,2]/aver_comparison[,1]
#Create a boxplot for the average hourly demand in daily basis
ElektrikTalep2 = ElektrikTalep[ElektrikTalep$Year>2016,]
plot1<-ggplot(data=ElektrikTalep2, aes(x=WeekDay, y=`Tuketim(MWh)`,
group=WeekDay,color=WeekDay))+ geom_boxplot();
plot2 <- plot1+ theme(text = element_text(size=16),axis.title.y = element_text(margin = margin(r = 20)),
axis.title.x = element_text(margin = margin(t = 20)));
plot3 <- plot2 + scale_x_continuous(breaks=1:7 , labels=gunler) + labs(y="average hourly demand (GWh)",
x="Days") + labs(color='Day');
plot3
# Welch t Test for the days of Wednesday and Sunday
wednesday_demand=ElektrikTalep2[ElektrikTalep2$WeekDay==3,];
sunday_demand=ElektrikTalep2[ElektrikTalep2$WeekDay==7,];
thursday_demand=ElektrikTalep2[ElektrikTalep2$WeekDay==4,];
welch_test = t.test(x=wednesday_demand$`Tuketim(MWh)`,y=sunday_demand$`Tuketim(MWh)`,alternative = "greater")
t.test(x=wednesday_demand$`Tuketim(MWh)`,y=thursday_demand$`Tuketim(MWh)`,alternative = "less")
welch_test
#p value is very small, conf int [4.956, inf], so there is a significant diff btw. wed & sund
# end of Analysis of Days of a Week
# Create a line graph the monthly average consumption
#We obtain the colorscales through following link http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf
renkler =  c("mediumpurple1","yellowgreen","navyblue",10)
renkscale = array(renkler, c(yil,3))
renkscale[1,]
plot(1:12,aylikort[2,],xlab="month",ylab="average hourly demand (GWh)",type="l",col=renkscale[1,],
ylim=c(25,40),xaxt = "n",lwd=2)
axis(1, at=1:12, labels=months)
for (i in 3:yil) {
lines(1:12,aylikort[i,],type="l",col=renkscale[i-1,],lwd=2)
}
legend("bottomright",inset=.01,legend=c(2017:sonyil),col = renkscale,lty=1,text.font=3,box.lty=0,cex=0.7,lwd=2)
#end of plot
# a simple analysis to calculate compound annual growth rates
cagrofjan = (aylikort[5,1] / aylikort[1,1])^(1/(yil-1))-1
cagroffeb = (aylikort[5,2] / aylikort[1,2])^(1/(yil-1))-1
cagrofmar = (aylikort[5,3] / aylikort[1,3])^(1/(yil-1))-1
cagrofapr = (aylikort[5,4] / aylikort[1,4])^(1/(yil-1))-1
runApp('~/Documents/GitHub/MyPublicRepository/R/ElectricitySectorAnalysis/Electricity_Shiny.R')
